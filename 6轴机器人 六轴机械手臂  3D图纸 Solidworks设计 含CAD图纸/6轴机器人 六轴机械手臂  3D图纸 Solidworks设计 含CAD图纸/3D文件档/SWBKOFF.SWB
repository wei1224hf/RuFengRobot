Dim swApp As Object
Dim Part As Object
Dim fs As Object
Dim oldCurrentWorkingDirectory As String
Dim exportFolderPath As String

Dim errorFilePath As String
Dim finishedFilePath As String

Private Declare Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" (hpvDest As Any, hpvSource As Any, ByVal cbCopy As Long)
Const ForReading = 1, ForWriting = 2, ForAppending = 8
Const TristateUseDefault = -2, TristateTrue = -1, TristateFalse = 0

'<Enumerators>
Public Enum swDocumentTypes_e
    swDocPART = 1
    swDocASSEMBLY = 2
    swDocDRAWING = 3
End Enum

Public Enum swOpenDocOptions_e
    swOpenDocOptions_Silent = 1
End Enum

Public Enum swSaveAsVersion_e
    swSaveAsCurrentVersion = 0
End Enum

Public Enum swSaveAsOptions_e
    swSaveAsOptions_Silent = &H1
    swSaveAsOptions_UpdateInactiveViews = &H10
End Enum

Sub main()

	Dim taskFileName As String
	Dim taskFilePath As String
	Dim taskFileType As String
	Dim taskFileDir As String
	Dim taskFileNameOnly As String
	
	Dim exportFileType As String
	Dim exportWorkingDir As String
	Dim exportToOriginalFolderFlag As Boolean
	Dim outputFolderPath As String
	
	Dim bRet As Boolean
	Dim longstatus As Long
	Dim dummyRet As Long

	'DXF
	Dim dxfMappingFlag As Boolean
	Dim dxfMappingFileName As String
	Dim dxfDontShowMappingFlag As Boolean
	Dim dxfOutputNoScaleFlag As Boolean
	Dim dxfSaveFormat As Integer
	Dim dxfFontTrueType As Integer
	Dim dxfLineStyleAutocadStdFlag As Boolean
	Dim dxfOutputScaleFactor As Double
	Dim dxfSheetRangeType As Integer
	Dim dxfSheetRange As String

	' IGES
	Dim igesOutputSolidSurface As Boolean
	Dim igesExportCurve As Boolean
	Dim igesOutputWireFrame As Boolean
	Dim igesExportSketch As Boolean
	Dim igesOutputGeometryAccuracy As Boolean
	Dim igesOutputAsmFile As Boolean
	Dim igesOutputAsmFileFormat As Boolean
	Dim igesRep As Integer
	Dim igesSystem As Integer
	Dim igesCurveRep As Integer

	' PDF
	Dim pdfInColor As Boolean
	Dim pdfEmbedFonts As Boolean
	Dim pdfHighQuality As Boolean
	Dim pdfPrintHeaderFooter As Boolean
	Dim pdfUsePrinterLineWeights As Boolean

	' STEP
	Dim stepGeometryPreference As Integer
	Dim stepType As Integer
	
	On Error GoTo error_handler

	bRet = True
	
' Start Task Customization
	exportWorkingDir = ByteArrayToString(Array(69,0,58,0,92,0,24,82,253,86,204,91,92,0,50,0,50,0,92,0,49,0,50,0,49,0,49,0,92,0,49,0,50,0,49,0,48,0,92,0,80,91,251,78,161,82,32,0,57,0,32,0,40,0,59,96,113,81,32,0,51,0,49,0,41,0,32,0,45,0,32,0,147,143,250,81,135,101,246,78,32,0,91,0,39,89,75,98,194,129,230,93,167,79,127,103,46,0,83,0,76,0,68,0,68,0,82,0,87,0,93,0,45,0,56,0,53,0,0,0))
	errorFilePath = ByteArrayToString(Array(69,0,58,0,92,0,24,82,253,86,204,91,92,0,50,0,50,0,92,0,49,0,50,0,49,0,49,0,92,0,49,0,50,0,49,0,48,0,0,0)) + "\swBKTask.error"
	finishedFilePath = exportWorkingDir + "\swBKTask.finished"
	taskFileName = ByteArrayToString(Array(39,89,75,98,194,129,230,93,167,79,127,103,46,0,83,0,76,0,68,0,68,0,82,0,87,0,0,0))
	taskFilePath = ByteArrayToString(Array(69,0,58,0,92,0,24,82,253,86,204,91,92,0,50,0,50,0,92,0,49,0,50,0,49,0,49,0,92,0,49,0,50,0,49,0,48,0,92,0,39,89,75,98,194,129,230,93,167,79,127,103,46,0,83,0,76,0,68,0,68,0,82,0,87,0,0,0))
	exportFileType = ByteArrayToString(Array(100,0,120,0,102,0,0,0))

	taskFileType = ByteArrayToString(Array(83,0,87,0,95,0,68,0,82,0,65,0,87,0,73,0,78,0,71,0,95,0,84,0,89,0,80,0,69,0,0,0))
	taskFileDir = ByteArrayToString(Array(69,0,58,0,92,0,24,82,253,86,204,91,92,0,50,0,50,0,92,0,49,0,50,0,49,0,49,0,92,0,49,0,50,0,49,0,48,0,0,0))
	outputFolderPath = ByteArrayToString(Array(69,0,58,0,92,0,24,82,253,86,204,91,92,0,50,0,50,0,92,0,49,0,50,0,49,0,49,0,0,0))
	
	exportToOriginalFolderFlag = CBool(ByteArrayToString(Array(70,0,65,0,76,0,83,0,69,0,0,0)) = "TRUE")
	
	dxfMappingFlag = CBool(ByteArrayToString(Array(70,0,65,0,76,0,83,0,69,0,0,0)) = "TRUE")
	dxfMappingFileName = ByteArrayToString(Array(73,0,78,0,86,0,65,0,76,0,73,0,68,0,95,0,84,0,79,0,75,0,69,0,78,0,0,0))
	if (dxfMappingFlag = False) Then dxfMappingFileName = ""

	dxfDontShowMappingFlag = CBool(ByteArrayToString(Array(84,0,82,0,85,0,69,0,0,0)) = "TRUE")
	dxfOutputNoScaleFlag = CBool(ByteArrayToString(Array(70,0,65,0,76,0,83,0,69,0,0,0)) = "TRUE")
	dxfSaveFormat = 4
	dxfFontTrueType = 1
	dxfLineStyleAutocadStdFlag = CBool(ByteArrayToString(Array(70,0,65,0,76,0,83,0,69,0,0,0)) = "TRUE")
	dxfOutputScaleFactor = 1.000000

	dxfSheetRangeType = 0
	dxfSheetRange = ByteArrayToString(Array(73,0,78,0,86,0,65,0,76,0,73,0,68,0,95,0,84,0,79,0,75,0,69,0,78,0,0,0))
	If (dxfSheetRangeType <> 2) Then dxfSheetRange = ""

	igesOutputSolidSurface = CBool(ByteArrayToString(Array(84,0,82,0,85,0,69,0,0,0)) = "TRUE")
	igesExportCurve = CBool(ByteArrayToString(Array(84,0,82,0,85,0,69,0,0,0)) = "TRUE")
	igesOutputWireFrame = CBool(ByteArrayToString(Array(70,0,65,0,76,0,83,0,69,0,0,0)) = "TRUE")
	igesExportSketch = CBool(ByteArrayToString(Array(70,0,65,0,76,0,83,0,69,0,0,0)) = "TRUE")
	igesOutputGeometryAccuracy = CBool(ByteArrayToString(Array(84,0,82,0,85,0,69,0,0,0)) = "TRUE")
	igesOutputAsmFile = CBool(ByteArrayToString(Array(84,0,82,0,85,0,69,0,0,0)) = "TRUE")
	igesOutputAsmFileFormat = CBool(ByteArrayToString(Array(84,0,82,0,85,0,69,0,0,0)) = "TRUE")
	igesRep = 0
	igesSystem = 0
	igesCurveRep = 0

	pdfInColor = CBool(ByteArrayToString(Array(84,0,82,0,85,0,69,0,0,0)) = "TRUE")
	pdfEmbedFonts = CBool(ByteArrayToString(Array(84,0,82,0,85,0,69,0,0,0)) = "TRUE")
	pdfHighQuality = CBool(ByteArrayToString(Array(84,0,82,0,85,0,69,0,0,0)) = "TRUE")
	pdfPrintHeaderFooter = CBool(ByteArrayToString(Array(84,0,82,0,85,0,69,0,0,0)) = "TRUE")
	pdfUsePrinterLineWeights = CBool(ByteArrayToString(Array(84,0,82,0,85,0,69,0,0,0)) = "TRUE")

	stepGeometryPreference = 0
	stepType = 203
' End Task Customization

	If (ErrorLogStart() = False) Then
		CleanUp
		Exit Sub
	End If

	Set Part = Nothing
	Set swApp = Nothing
	Set fs = Nothing

	' Verify that export working directory exists
	Set fs = CreateObject("Scripting.FileSystemObject")
	If (fs.FolderExists(exportWorkingDir) = False) Then
		ErrorOut ("Unable to find export working directory " + exportWorkingDir)
	Else
		' Create SolidWorks Application object
		Set swApp = Application.SldWorks
		If (swApp Is Nothing) Then
			ErrorOut "Unable to create SldWorks.Application object."
		Else
			oldCurrentWorkingDirectory = swApp.GetCurrentWorkingDirectory
			swApp.SetCurrentWorkingDirectory exportWorkingDir

			If (taskFileType = "SW_PART_TYPE" Or taskFileType = "SW_PART_TYPE_OLD") Then
				Set Part = swApp.OpenDoc6 (taskFilePath, swDocPART, swOpenDocOptions_Silent, "", dummyRet, longstatus)
				Set Part = swApp.ActivateDoc (taskFileName)
			ElseIf (taskFileType = "SW_ASSEMBLY_TYPE" Or taskFileType = "SW_ASSEMBLY_TYPE_OLD") Then
				Set Part = swApp.OpenDoc6 (taskFilePath, swDocASSEMBLY, swOpenDocOptions_Silent, "", dummyRet, longstatus)
				Set Part = swApp.ActivateDoc (taskFileName)
			ElseIf (taskFileType = "SW_DRAWING_TYPE" Or taskFileType = "SW_DRAWING_TYPE_OLD") Then
				Set Part = swApp.OpenDoc6 (taskFilePath, swDocDRAWING, swOpenDocOptions_Silent, "", dummyRet, longstatus)
				Set Part = swApp.ActivateDoc (taskFileName)
			End If

			If Part Is Nothing Then
				ErrorOut "Document could not be exported/saved."
			Else
				'Export Options:
				
				If (exportFileType = "dxf" Or exportFileType = "dwg") Then
					'DXF/DWG
					swApp.SetUserPreferenceToggle 8, dxfMappingFlag
					swApp.SetUserPreferenceToggle 21, dxfDontShowMappingFlag
					swApp.SetUserPreferenceIntegerValue 0, dxfSaveFormat
					swApp.SetUserPreferenceIntegerValue 1, dxfFontTrueType
					swApp.SetUserPreferenceIntegerValue 2, 0
					If (dxfLineStyleAutocadStdFlag) Then
						swApp.SetUserPreferenceIntegerValue 135, 0
					Else
						swApp.SetUserPreferenceIntegerValue 135, 1
					End If
					If (dxfOutputNoScaleFlag) Then
						swApp.SetUserPreferenceIntegerValue 136, 0
					Else
						swApp.SetUserPreferenceIntegerValue 136, 1
					End If
					swApp.SetUserPreferenceIntegerValue 253, 0
					swApp.SetUserPreferenceDoubleValue 79, dxfOutputScaleFactor
					swApp.SetUserPreferenceStringListValue 0, dxfMappingFileName
				ElseIf (exportFileType = "igs") Then
					'IGES
					swApp.SetUserPreferenceToggle 184, igesOutputSolidSurface
					swApp.SetUserPreferenceToggle 185, igesExportCurve
					swApp.SetUserPreferenceToggle 186, igesOutputWireFrame
					swApp.SetUserPreferenceToggle 108, igesExportSketch
					swApp.SetUserPreferenceToggle 107, igesOutputGeometryAccuracy
					swApp.SetUserPreferenceToggle 109, igesOutputAsmFile
					swApp.SetUserPreferenceToggle 110, igesOutputAsmFileFormat
					swApp.SetUserPreferenceIntegerValue 83, igesRep
					swApp.SetUserPreferenceIntegerValue 84, igesSystem
					swApp.SetUserPreferenceIntegerValue 85, igesCurveRep
				ElseIf (exportFileType = "pdf") Then
					'PDF
					swApp.SetUserPreferenceToggle 323, pdfInColor
					swApp.SetUserPreferenceToggle 324, pdfEmbedFonts
					swApp.SetUserPreferenceToggle 325, pdfHighQuality
					swApp.SetUserPreferenceToggle 326, pdfPrintHeaderFooter
					swApp.SetUserPreferenceToggle 327, pdfUsePrinterLineWeights
				ElseIf (exportFileType = "step") Then
					'STEP
					swApp.SetUserPreferenceIntegerValue 142, stepGeometryPreference
					swApp.SetUserPreferenceIntegerValue 75, stepType
				End If

				'Set output file folder
				If ( exportToOriginalFolderFlag ) Then
					exportFolderPath = taskFileDir
				Else
					exportFolderPath = outputFolderPath
				End If
				
				taskFileNameOnly = GetFileNameOnly(taskFileName)
				
				If (exportFileType = "igs" Or exportFileType = "pdf" Or exportFileType = "jpg" Or exportFileType = "step") Then
					bRet = Save_File (taskFileNameOnly + "." + exportFileType)
				End If

				If (exportFileType = "dxf" Or exportFileType = "dwg") Then
					If (Part.GetType = swDocDRAWING) Then
						If (dxfSheetRangeType = 0) Then
							bRet = Export_File_0(taskFileNameOnly, exportFileType)
						ElseIf (dxfSheetRangeType = 1) Then
							bRet = Export_File_1(taskFileNameOnly, exportFileType)
						ElseIf (dxfSheetRangeType = 2) Then
							bRet = Export_File_2(dxfSheetRange, taskFileNameOnly, exportFileType)
						End If

					End If
				End If

				If (bRet = False) Then
					ErrorOut "Document could not be exported/saved."
				End If
				Set Part = Nothing
				swApp.CloseAllDocuments True
			End If
		End If
	End If
	ErrorLogFinish
	CleanUp
	Exit Sub

error_handler:
	If (ErrorOut (Err.Description) = True) Then
		ErrorLogFinish
	End If
	CleanUp
End Sub

Function CleanUp() As Boolean
	On Error GoTo error_handler
	CleanUp = False
	If ((fs Is Nothing) = False) Then
		Set fs = Nothing
	End If

	If ((Part Is Nothing) = False) Then
		Set Part = Nothing
	End If

	' Exit and Clean up SolidWorks
	If ((swApp Is Nothing) = False) Then
		swApp.CloseAllDocuments True
		swApp.SetCurrentWorkingDirectory oldCurrentWorkingDirectory
	End If

	CompleteTask

error_handler:
	Set fs = Nothing
	Set Part = Nothing
	Set swApp = Nothing
	CleanUp = True
End Function

Function GetFileNameOnly(fileName As String) As String
	On Error GoTo error_handler

	GetFileNameOnly = ""
	GetFileNameOnly = Left(fileName, Len(fileName) - Len(Mid(fileName, InStrRev(fileName, "."))))	

error_handler:

End Function

Function Export_File_0(taskFileNameOnly As String, exportFileType As String) As Boolean	'Export DXF/DWF - All sheets
	Dim i As Integer
	Dim sheetCount As Long
	Dim sheetNames As Variant
	Dim exportFileName As String
	
	On Error GoTo error_handler
	Export_File_0 = False
	
	sheetCount = Part.GetSheetCount()
	sheetNames = Part.GetSheetNames()
	
	For i = 0 To sheetCount - 1
		Part.ActivateSheet sheetNames(i)
		Part.ForceRebuild3 (False)

		exportFileName = taskFileNameOnly + "__" + CStr(i + 1) + "." + exportFileType
		If (Save_File(exportFileName) = False) Then
			Exit Function
		End If
	Next i
	
	Export_File_0 = True
error_handler:
	
End Function

Function Export_File_1(taskFileNameOnly As String, exportFileType As String) As Boolean	'Export DXF/DWF - Active sheet
	Dim i As Integer
	Dim sheetCount As Long
	Dim sheetNames As Variant
	Dim activeSheet As Object
	Dim activeSheetName As String
	Dim exportFileName As String
	
	On Error GoTo error_handler
	Export_File_1 = False
	
	sheetCount = Part.GetSheetCount()
	sheetNames = Part.GetSheetNames()
	
	Set activeSheet = Part.GetCurrentSheet()
	activeSheetName = activeSheet.GetName()
	Set activeSheet = Nothing
	
	For i = 0 To sheetCount - 1
		If ( sheetNames(i) = activeSheetName) Then
			exportFileName = taskFileNameOnly + "__" + CStr(i + 1) + "." + exportFileType
			
			Export_File_1 = Save_File(exportFileName)
			Exit Function
		End If
	Next i
		
error_handler:
	Set activeSheet = Nothing
End Function

Function Export_File_2(sheetRange As String, taskFileNameOnly As String, exportFileType As String) As Boolean 'Export DXF/DWF - Sheet range
	Dim i As Integer
	Dim sheetCount As Long
	Dim sheetNames As Variant
	Dim exportFileName As String

	Dim tempStr As String
	Dim temploc As Integer
	Dim temploc2 As Integer
	Dim fieldStr As String

	Dim fromSheetNumber As Integer
	Dim toSheetNumber As Integer

	On Error GoTo error_handler
	Export_File_2 = False
	
	tempStr = sheetRange
	If (tempStr = "INVALID_TOKEN") Then
		Exit Function
	End If
	
	sheetCount = Part.GetSheetCount()
	sheetNames = Part.GetSheetNames()
	
	temploc = InStr(1, tempStr, ",")
	While temploc > 0
		fieldStr = Left(tempStr, temploc - 1)
		tempStr = Mid(tempStr, temploc + 1)
		temploc2 = InStr(1, fieldStr, "-")
		If (temploc2 > 0) Then
			fromSheetNumber = CInt(Left(fieldStr, temploc2 - 1))
			toSheetNumber = CInt(Mid(fieldStr, temploc2 + 1))
		Else
			fromSheetNumber = CInt(fieldStr)
			toSheetNumber = CInt(fieldStr)
		End If
		If (toSheetNumber >= fromSheetNumber And toSheetNumber <= sheetCount And fromSheetNumber >= 1) Then
			For i = fromSheetNumber - 1 To toSheetNumber - 1
				Part.ActivateSheet sheetNames(i)
				Part.ForceRebuild3 (False)

				exportFileName = taskFileNameOnly + "__" + CStr(i + 1) + "." + exportFileType
				Save_File(exportFileName)
			Next i
		End If
		temploc = InStr(1, tempStr, ",")
	Wend
	If (tempStr <> "") Then
		temploc2 = InStr(1, tempStr, "-")
		If (temploc2 > 0) Then
			fromSheetNumber = CInt(Left(tempStr, temploc2 - 1))
			toSheetNumber = CInt(Mid(tempStr, temploc2 + 1))
		Else
			fromSheetNumber = CInt(tempStr)
			toSheetNumber = CInt(tempStr)
		End If
		If (toSheetNumber >= fromSheetNumber And toSheetNumber <= sheetCount And fromSheetNumber >= 1) Then
			For i = fromSheetNumber - 1 To toSheetNumber - 1
				Part.ActivateSheet sheetNames(i)
				Part.ForceRebuild3 (False)

				exportFileName = taskFileNameOnly + "__" + CStr(i + 1) + "." + exportFileType
				Save_File(exportFileName)
			Next i
		End If
	End If

	Export_File_2 = True
	
error_handler:

End Function

Function Save_File(exportFileName As String) As Boolean
	On Error GoTo error_handler

	Dim swFileSaveError As Long
	Dim swFileSaveWarning As Long
	Dim exportFilePathName As String
	
	Save_File = False
	
	swApp.SetCurrentWorkingDirectory (exportFolderPath)
	exportFilePathName = exportFolderPath + "\" + exportFileName
	Part.GraphicsRedraw2
	Part.SaveAs4 exportFilePathName, swSaveAsCurrentVersion, swSaveAsOptions_Silent Or swSaveAsOptions_UpdateInactiveViews, swFileSaveError, swFileSaveWarning

	Save_File = True
	
	WarningOut "<ExportFilePath>" + exportFilePathName + "</ExportFilePath>"
error_handler:

End Function

Function WriteLog(filePath As String, message As String) As Boolean
	On Error GoTo error_handler
	WriteLog = False
	Dim fso As Object
	Dim f As Object
	Set fso = CreateObject("Scripting.FileSystemObject")
	Set f = fso.OpenTextFile(filePath, ForAppending, True, TristateFalse)
	f.WriteLine message
	f.Close
	WriteLog = True
	GoTo func_cleanup
error_handler:
	If ((f Is Nothing) = False) Then
		f.Close
	End If
func_cleanup:
	Set f = Nothing
	Set fso = Nothing
End Function

Function ErrorLogStart() As Boolean
	ErrorLogStart = WriteLog(errorFilePath, "Error log started")
End Function

Function WarningOut(errorString As String) As Boolean
	WarningOut = WriteLog(errorFilePath, ("Warning: " + errorString))
End Function

Function ErrorOut(errorString As String) As Boolean
	ErrorOut = WriteLog(errorFilePath, ("Error: " + errorString))
End Function

Function CompleteTask() As Boolean
	CompleteTask = WriteLog(finishedFilePath, "")
End Function

Function ErrorLogFinish() As Boolean
	ErrorLogFinish = WriteLog(errorFilePath, "Error log finished")
End Function

Function ByteArrayToString(ByRef arr As Variant) As String
	Dim numbytes, i
	numbytes = UBound(arr) + 1
	Dim byteArray() As Byte
	ReDim byteArray(numbytes)
	For i = 0 To numbytes - 1
		byteArray(i) = arr(i)
	Next i
	ByteArrayToString = String$(numbytes / 2 - 1, 0)
	CopyMemory ByVal StrPtr(ByteArrayToString), byteArray(0), numbytes
End Function